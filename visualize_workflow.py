"""
visualize_workflow.py
병렬 워크플로우 구조 시각화
"""


def print_workflow_diagram():
    """병렬 워크플로우 다이어그램 출력"""
    
    diagram = """
╔══════════════════════════════════════════════════════════════════════╗
║                    투자 심사 Agent 워크플로우                          ║
║                   (Fan-out & Fan-in 병렬 처리)                         ║
╚══════════════════════════════════════════════════════════════════════╝

                              ┌─────────┐
                              │  START  │
                              └────┬────┘
                                   │
                                   ▼
                            ┌──────────────┐
                            │  start_node  │
                            └──────┬───────┘
                                   │
        ╔══════════════════════════╩════════════════════════════╗
        ║                    Fan-out (병렬 분기)                  ║
        ╚═════════════════════════════════════════════════════════╝
        │          │          │          │          │          │
        ▼          ▼          ▼          ▼          ▼          ▼
   ┌────────┐ ┌────────┐ ┌────────┐ ┌────────┐ ┌────────┐ ┌────────┐
   │ 🔧기술력│ │📚학습효과│ │💰시장성 │ │⚔️경쟁력 │ │🚀성장성 │ │⚠️리스크│
   │  Agent │ │  Agent │ │  Agent │ │  Agent │ │  Agent │ │  Agent │
   └───┬────┘ └────┬───┘ └────┬───┘ └────┬───┘ └────┬───┘ └────┬───┘
       │          │          │          │          │          │
        ╔═════════════════════════════════════════════════════╗
        ║                 Fan-in (결과 수렴)                    ║
        ╚══════════════════════════╦══════════════════════════╝
                                   │
                                   ▼
                            ┌──────────────┐
                            │  ⚖️ Judge     │
                            │  종합 판단    │
                            └──────┬───────┘
                                   │
                                   ▼
                            ┌──────────────┐
                            │  📝 Report    │
                            │  보고서 생성  │
                            └──────┬───────┘
                                   │
                                   ▼
                              ┌─────────┐
                              │   END   │
                              └─────────┘

╔══════════════════════════════════════════════════════════════════════╗
║  특징:                                                                ║
║  ✅ 6개 분석 Agent가 동시에 병렬 실행                                  ║
║  ✅ 각 Agent는 독립적으로 웹 검색 및 분석 수행                          ║
║  ✅ 모든 Agent 완료 후 Judge에서 종합 판단                             ║
║  ⚡ 순차 실행 대비 최대 6배 속도 향상 가능                              ║
╚══════════════════════════════════════════════════════════════════════╝
"""
    
    print(diagram)


def print_comparison():
    """순차 vs 병렬 비교"""
    
    comparison = """
╔══════════════════════════════════════════════════════════════════════╗
║                      순차 실행 vs 병렬 실행 비교                        ║
╚══════════════════════════════════════════════════════════════════════╝

🐌 순차 실행 (Before)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  기술력 → 학습효과 → 시장성 → 경쟁력 → 성장성 → 리스크 → 판단 → 보고서
  
  각 Agent가 순서대로 실행 (약 60-120초)


🚀 병렬 실행 (After)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

          ┌─ 기술력 ──┐
          ├─ 학습효과 ┤
  START → ├─ 시장성 ──┤ → 판단 → 보고서
          ├─ 경쟁력 ──┤
          ├─ 성장성 ──┤
          └─ 리스크 ──┘
  
  6개 Agent가 동시 실행 (약 15-30초)


📊 예상 성능
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  Agent당 평균 실행 시간: 10-20초
  
  순차 실행: 10초 × 6개 = 60초 + Judge(5초) + Report(5초) = 70초
  병렬 실행: 20초 (가장 느린 Agent) + Judge(5초) + Report(5초) = 30초
  
  ⚡ 속도 향상: 약 2.3배
  ⏰ 절약 시간: 약 40초

╚══════════════════════════════════════════════════════════════════════╝
"""
    
    print(comparison)


def print_technical_details():
    """기술적 세부사항"""
    
    details = """
╔══════════════════════════════════════════════════════════════════════╗
║                        기술적 구현 세부사항                            ║
╚══════════════════════════════════════════════════════════════════════╝

1️⃣ Fan-out (분기) 구현
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  workflow.add_edge("start", "technology")
  workflow.add_edge("start", "learning")
  workflow.add_edge("start", "market")
  workflow.add_edge("start", "competition")
  workflow.add_edge("start", "growth")
  workflow.add_edge("start", "risk")
  
  → 하나의 노드에서 여러 노드로 엣지 생성
  → LangGraph가 자동으로 병렬 실행


2️⃣ Fan-in (수렴) 구현
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  workflow.add_edge("technology", "judge")
  workflow.add_edge("learning", "judge")
  workflow.add_edge("market", "judge")
  workflow.add_edge("competition", "judge")
  workflow.add_edge("growth", "judge")
  workflow.add_edge("risk", "judge")
  
  → 여러 노드에서 하나의 노드로 엣지 생성
  → 모든 선행 노드 완료 후 judge 실행


3️⃣ State 공유
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  - 모든 Agent가 동일한 AgentState를 공유
  - 각 Agent는 자신의 필드만 업데이트
  - 병렬 실행 중에도 State 충돌 없음
  
  예:
  technology_agent → technology_score 업데이트
  market_agent → market_score 업데이트


4️⃣ 동기화
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  LangGraph가 자동으로 처리:
  ✅ 병렬 실행 중 State 동기화
  ✅ 모든 Agent 완료 대기
  ✅ Judge 노드로 안전하게 진입

╚══════════════════════════════════════════════════════════════════════╝
"""
    
    print(details)


def print_usage():
    """사용 방법"""
    
    usage = """
╔══════════════════════════════════════════════════════════════════════╗
║                           사용 방법                                   ║
╚══════════════════════════════════════════════════════════════════════╝

1️⃣ 일반 실행 (병렬 모드)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  python main.py
  
  → 자동으로 병렬 실행
  → 실행 시간이 콘솔에 표시됨


2️⃣ 성능 비교 모드
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  python main.py --compare
  
  → 동일한 입력으로 순차 실행과 병렬 실행을 모두 수행
  → 속도 차이를 직접 비교
  → 성능 개선율 확인


3️⃣ 워크플로우 시각화
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  python visualize_workflow.py
  
  → 워크플로우 다이어그램 출력
  → 기술적 세부사항 확인


4️⃣ Python 코드에서 사용
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  from main import run_investment_analysis
  
  result = run_investment_analysis("뤼이드")
  print(f"투자 결정: {result['final_judge']}")

╚══════════════════════════════════════════════════════════════════════╝
"""
    
    print(usage)


if __name__ == "__main__":
    print_workflow_diagram()
    print()
    print_comparison()
    print()
    print_technical_details()
    print()
    print_usage()